# Generated by Django 2.1.3 on 2018-12-06 22:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('company', models.CharField(blank=True, max_length=256, null=True, verbose_name='单位/公司')),
                ('tel', models.CharField(blank=True, max_length=11, null=True, verbose_name='联系方式')),
                ('address', models.CharField(blank=True, max_length=256, null=True, verbose_name='联系地址')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('is_manage', models.BooleanField(default=False, verbose_name='管理员')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户',
                'verbose_name': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdvProgramme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否发布')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('is_review', models.BooleanField(default=False, verbose_name='是否提交审核')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '广告节目',
                'verbose_name': '广告节目',
            },
        ),
        migrations.CreateModel(
            name='AdvProgrammeMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nid', models.PositiveIntegerField(blank=True, null=True, verbose_name='序号')),
            ],
            options={
                'verbose_name_plural': '广告节目素材',
                'verbose_name': '广告节目素材',
            },
        ),
        migrations.CreateModel(
            name='AdvProgrammeRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '广告节目关联设备时间',
                'verbose_name': '广告节目关联设备时间',
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, unique=True, verbose_name='标题')),
                ('is_selected', models.BooleanField(default=False, verbose_name='是否已选择')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auth.Group')),
            ],
            options={
                'verbose_name_plural': '设备区域',
                'verbose_name': '设备区域',
            },
        ),
        migrations.CreateModel(
            name='FileTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标签')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '文件标签',
                'verbose_name': '文件标签',
            },
        ),
        migrations.CreateModel(
            name='IntervalTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, unique=True, verbose_name='时间段')),
            ],
            options={
                'verbose_name_plural': '时间段',
                'verbose_name': '时间段',
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('title', models.CharField(max_length=64, verbose_name='名称')),
                ('nid', models.CharField(max_length=256, primary_key=True, serialize=False)),
                ('position', models.CharField(blank=True, max_length=256, null=True, verbose_name='地理位置')),
                ('supplier', models.CharField(blank=True, max_length=62, null=True, verbose_name='供应商')),
                ('heart_time', models.DateTimeField(blank=True, null=True, verbose_name='心跳时间')),
                ('update_time', models.DateTimeField(blank=True, null=True, verbose_name='更新时间')),
                ('area', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.Area')),
            ],
            options={
                'verbose_name_plural': '设备',
                'verbose_name': '设备',
            },
        ),
        migrations.CreateModel(
            name='MaterialFiles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=32, null=True, verbose_name='标题')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('files', models.FileField(upload_to='documents/', verbose_name='文件')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='materials.FileTag')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '文件',
                'verbose_name': '文件',
            },
        ),
        migrations.CreateModel(
            name='PrimaryProgrammeRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.Machine')),
            ],
            options={
                'verbose_name_plural': '公益节目主屏关联设备',
                'verbose_name': '公益节目主屏关联设备',
            },
        ),
        migrations.CreateModel(
            name='PrimaryWelfareProgramme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否发布')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '公益节目主屏',
                'verbose_name': '公益节目主屏',
            },
        ),
        migrations.CreateModel(
            name='PrimaryWelfareProgrammeMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nid', models.PositiveIntegerField(blank=True, null=True, verbose_name='序号')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.MaterialFiles')),
                ('programme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.PrimaryWelfareProgramme')),
            ],
            options={
                'verbose_name_plural': '公益节目主屏素材',
                'verbose_name': '公益节目主屏素材',
            },
        ),
        migrations.CreateModel(
            name='SecondaryWelfareProgramme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='标题')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否发布')),
                ('create_time', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '公益节目副屏',
                'verbose_name': '公益节目副屏',
            },
        ),
        migrations.CreateModel(
            name='SecondaryWelfareProgrammeMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nid', models.PositiveIntegerField(blank=True, null=True, verbose_name='序号')),
                ('material', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.MaterialFiles')),
                ('programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.SecondaryWelfareProgramme')),
            ],
            options={
                'verbose_name_plural': '公益节目副屏素材',
                'verbose_name': '公益节目副屏素材',
            },
        ),
        migrations.CreateModel(
            name='SecondaryWelfareProgrammeRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.Machine')),
                ('welfare_programme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.SecondaryWelfareProgramme')),
            ],
            options={
                'verbose_name_plural': '公益节目副屏关联设备',
                'verbose_name': '公益节目副屏关联设备',
            },
        ),
        migrations.AddField(
            model_name='primaryprogrammerelated',
            name='programme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.PrimaryWelfareProgramme'),
        ),
        migrations.AddField(
            model_name='advprogrammerelated',
            name='machine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.Machine'),
        ),
        migrations.AddField(
            model_name='advprogrammerelated',
            name='programme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='materials.AdvProgramme'),
        ),
        migrations.AddField(
            model_name='advprogrammerelated',
            name='time_choice',
            field=models.ManyToManyField(blank=True, to='materials.IntervalTime'),
        ),
        migrations.AddField(
            model_name='advprogrammematerial',
            name='material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.MaterialFiles'),
        ),
        migrations.AddField(
            model_name='advprogrammematerial',
            name='programme',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='materials.AdvProgramme'),
        ),
        migrations.AlterUniqueTogether(
            name='secondarywelfareprogrammerelated',
            unique_together={('machine', 'welfare_programme')},
        ),
        migrations.AlterUniqueTogether(
            name='primaryprogrammerelated',
            unique_together={('programme', 'machine')},
        ),
    ]
